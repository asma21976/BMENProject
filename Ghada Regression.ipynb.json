{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "22dab7fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import explained_variance_score\n",
    "from sklearn.cross_decomposition import PLSRegression\n",
    "from sklearn.preprocessing import StandardScaler \n",
    "from sklearn import preprocessing \n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import metrics \n",
    "\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "7475f41a",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset= pd.read_csv('Volumetric_features-2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "8203ffd7",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S.No</th>\n",
       "      <th>Left-Lateral-Ventricle</th>\n",
       "      <th>Left-Inf-Lat-Vent</th>\n",
       "      <th>Left-Cerebellum-White-Matter</th>\n",
       "      <th>Left-Cerebellum-Cortex</th>\n",
       "      <th>Left-Thalamus</th>\n",
       "      <th>Left-Caudate</th>\n",
       "      <th>Left-Putamen</th>\n",
       "      <th>Left-Pallidum</th>\n",
       "      <th>3rd-Ventricle</th>\n",
       "      <th>...</th>\n",
       "      <th>rh_supramarginal_thickness</th>\n",
       "      <th>rh_frontalpole_thickness</th>\n",
       "      <th>rh_temporalpole_thickness</th>\n",
       "      <th>rh_transversetemporal_thickness</th>\n",
       "      <th>rh_insula_thickness</th>\n",
       "      <th>rh_MeanThickness_thickness</th>\n",
       "      <th>BrainSegVolNotVent.2</th>\n",
       "      <th>eTIV.1</th>\n",
       "      <th>Age</th>\n",
       "      <th>dataset</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>22916.9</td>\n",
       "      <td>982.7</td>\n",
       "      <td>15196.7</td>\n",
       "      <td>55796.4</td>\n",
       "      <td>6855.5</td>\n",
       "      <td>2956.4</td>\n",
       "      <td>4240.7</td>\n",
       "      <td>2223.9</td>\n",
       "      <td>2034.4</td>\n",
       "      <td>...</td>\n",
       "      <td>2.408</td>\n",
       "      <td>2.629</td>\n",
       "      <td>3.519</td>\n",
       "      <td>2.009</td>\n",
       "      <td>2.825</td>\n",
       "      <td>2.33635</td>\n",
       "      <td>1093846</td>\n",
       "      <td>1619602.965</td>\n",
       "      <td>85</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>22953.2</td>\n",
       "      <td>984.5</td>\n",
       "      <td>15289.7</td>\n",
       "      <td>55778.6</td>\n",
       "      <td>6835.1</td>\n",
       "      <td>3064.2</td>\n",
       "      <td>4498.6</td>\n",
       "      <td>2354.1</td>\n",
       "      <td>1927.1</td>\n",
       "      <td>...</td>\n",
       "      <td>2.417</td>\n",
       "      <td>2.640</td>\n",
       "      <td>3.488</td>\n",
       "      <td>2.111</td>\n",
       "      <td>2.720</td>\n",
       "      <td>2.34202</td>\n",
       "      <td>1099876</td>\n",
       "      <td>1624755.130</td>\n",
       "      <td>85</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>23320.4</td>\n",
       "      <td>1062.1</td>\n",
       "      <td>15382.1</td>\n",
       "      <td>55551.2</td>\n",
       "      <td>7566.0</td>\n",
       "      <td>3231.7</td>\n",
       "      <td>4456.2</td>\n",
       "      <td>1995.4</td>\n",
       "      <td>2064.7</td>\n",
       "      <td>...</td>\n",
       "      <td>2.374</td>\n",
       "      <td>2.601</td>\n",
       "      <td>3.342</td>\n",
       "      <td>2.146</td>\n",
       "      <td>2.684</td>\n",
       "      <td>2.31982</td>\n",
       "      <td>1097999</td>\n",
       "      <td>1622609.518</td>\n",
       "      <td>86</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>24360.0</td>\n",
       "      <td>1000.5</td>\n",
       "      <td>14805.4</td>\n",
       "      <td>54041.8</td>\n",
       "      <td>8004.6</td>\n",
       "      <td>3137.3</td>\n",
       "      <td>4262.2</td>\n",
       "      <td>1983.4</td>\n",
       "      <td>2017.7</td>\n",
       "      <td>...</td>\n",
       "      <td>2.366</td>\n",
       "      <td>2.639</td>\n",
       "      <td>3.361</td>\n",
       "      <td>2.056</td>\n",
       "      <td>2.700</td>\n",
       "      <td>2.29215</td>\n",
       "      <td>1070117</td>\n",
       "      <td>1583854.236</td>\n",
       "      <td>87</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>25769.4</td>\n",
       "      <td>1124.4</td>\n",
       "      <td>16331.1</td>\n",
       "      <td>54108.6</td>\n",
       "      <td>6677.4</td>\n",
       "      <td>2964.4</td>\n",
       "      <td>4204.6</td>\n",
       "      <td>2409.7</td>\n",
       "      <td>2251.8</td>\n",
       "      <td>...</td>\n",
       "      <td>2.381</td>\n",
       "      <td>2.555</td>\n",
       "      <td>3.450</td>\n",
       "      <td>2.052</td>\n",
       "      <td>2.574</td>\n",
       "      <td>2.30397</td>\n",
       "      <td>1075926</td>\n",
       "      <td>1617375.362</td>\n",
       "      <td>89</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 141 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   S.No  Left-Lateral-Ventricle  Left-Inf-Lat-Vent  \\\n",
       "0     1                 22916.9              982.7   \n",
       "1     2                 22953.2              984.5   \n",
       "2     3                 23320.4             1062.1   \n",
       "3     4                 24360.0             1000.5   \n",
       "4     5                 25769.4             1124.4   \n",
       "\n",
       "   Left-Cerebellum-White-Matter  Left-Cerebellum-Cortex  Left-Thalamus  \\\n",
       "0                       15196.7                 55796.4         6855.5   \n",
       "1                       15289.7                 55778.6         6835.1   \n",
       "2                       15382.1                 55551.2         7566.0   \n",
       "3                       14805.4                 54041.8         8004.6   \n",
       "4                       16331.1                 54108.6         6677.4   \n",
       "\n",
       "   Left-Caudate  Left-Putamen  Left-Pallidum  3rd-Ventricle  ...  \\\n",
       "0        2956.4        4240.7         2223.9         2034.4  ...   \n",
       "1        3064.2        4498.6         2354.1         1927.1  ...   \n",
       "2        3231.7        4456.2         1995.4         2064.7  ...   \n",
       "3        3137.3        4262.2         1983.4         2017.7  ...   \n",
       "4        2964.4        4204.6         2409.7         2251.8  ...   \n",
       "\n",
       "   rh_supramarginal_thickness  rh_frontalpole_thickness  \\\n",
       "0                       2.408                     2.629   \n",
       "1                       2.417                     2.640   \n",
       "2                       2.374                     2.601   \n",
       "3                       2.366                     2.639   \n",
       "4                       2.381                     2.555   \n",
       "\n",
       "   rh_temporalpole_thickness  rh_transversetemporal_thickness  \\\n",
       "0                      3.519                            2.009   \n",
       "1                      3.488                            2.111   \n",
       "2                      3.342                            2.146   \n",
       "3                      3.361                            2.056   \n",
       "4                      3.450                            2.052   \n",
       "\n",
       "   rh_insula_thickness  rh_MeanThickness_thickness  BrainSegVolNotVent.2  \\\n",
       "0                2.825                     2.33635               1093846   \n",
       "1                2.720                     2.34202               1099876   \n",
       "2                2.684                     2.31982               1097999   \n",
       "3                2.700                     2.29215               1070117   \n",
       "4                2.574                     2.30397               1075926   \n",
       "\n",
       "        eTIV.1  Age  dataset  \n",
       "0  1619602.965   85        1  \n",
       "1  1624755.130   85        1  \n",
       "2  1622609.518   86        1  \n",
       "3  1583854.236   87        1  \n",
       "4  1617375.362   89        1  \n",
       "\n",
       "[5 rows x 141 columns]"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "fe2b4e75",
   "metadata": {},
   "outputs": [],
   "source": [
    "#matrix of features\n",
    "X = dataset.iloc[:,1:138].values\n",
    "#vectors of age  \n",
    "Y = dataset.iloc[:,139].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "a0a27bd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#splitting dataset into training and testing dataset\n",
    "X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=0) #test size is 20% of the data, remaining 80 is training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "b758b691",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "StandardScaler()"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature scaling to convert all variables to the same scale\n",
    "scaler =StandardScaler()\n",
    "scaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "d44e0ea9",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = scaler.fit_transform(X_train) #use fit transform on training set\n",
    "X_test = scaler.transform(X_test) #use transform on test set so the same mean and variance \n",
    "                                  #used on the training data as is used to transform our test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "5d62c821",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.50702922e-15,  4.30309963e-16,  1.40810440e-14,  9.61933524e-15,\n",
       "        4.91318032e-15, -8.68486742e-16,  2.49306164e-14, -1.13093952e-14,\n",
       "        4.46060020e-16,  1.02124095e-15,  2.01997853e-14,  7.75640236e-15,\n",
       "        5.69876165e-15, -2.99903100e-15,  7.62512998e-15,  8.32512888e-15,\n",
       "        1.46349074e-16,  4.08250028e-15,  1.92107999e-15, -1.39354340e-15,\n",
       "        1.08936528e-15, -2.08635706e-14, -1.37530109e-14,  1.47622217e-14,\n",
       "        1.25928196e-15,  1.23504100e-17, -2.96183422e-14,  1.50445074e-15,\n",
       "       -3.13460632e-15, -3.75350638e-15,  1.47843605e-15, -3.74230561e-15,\n",
       "       -1.15725969e-15, -5.15646040e-16,  0.00000000e+00,  0.00000000e+00,\n",
       "        2.58385522e-16,  0.00000000e+00,  0.00000000e+00, -9.81627665e-16,\n",
       "       -2.16746410e-15, -7.70967774e-15,  2.14062824e-15, -5.95084468e-15,\n",
       "        4.33795012e-15,  5.02958950e-16,  7.60194833e-16,  7.67275789e-15,\n",
       "       -9.44321873e-15, -5.02213327e-15, -2.57083966e-16,  1.61015185e-16,\n",
       "       -4.86790095e-17, -1.35070292e-16, -2.08140868e-14, -2.85274762e-17,\n",
       "        2.69705363e-16,  3.94162021e-16, -2.96947858e-14, -7.42195588e-15,\n",
       "       -3.62300591e-17, -1.43967678e-16,  1.14192022e-16, -1.39072925e-14,\n",
       "        4.29636602e-15,  2.17680246e-14, -3.45109543e-14,  7.57827397e-15,\n",
       "        9.47486665e-15,  4.02702198e-15, -2.06935061e-16, -5.82824059e-14,\n",
       "        1.11271199e-14, -1.84076404e-14,  4.00397992e-15, -3.62383036e-14,\n",
       "       -1.93055302e-14, -1.98026342e-14,  2.86805753e-14, -2.03981145e-14,\n",
       "        3.33349390e-14,  1.43205549e-14,  2.65939309e-14,  1.21377760e-14,\n",
       "       -1.73031461e-14,  2.49299266e-14, -4.95860690e-14,  3.72565150e-15,\n",
       "       -2.01524530e-14, -2.62071758e-15, -4.75818431e-15, -2.92985475e-14,\n",
       "       -1.29653684e-14, -7.75339687e-15, -8.04193990e-15, -2.76816702e-15,\n",
       "       -1.54270170e-14, -1.68873709e-14, -1.25641608e-14,  7.60194833e-16,\n",
       "       -1.39072925e-14, -2.22015700e-14, -1.14600308e-14,  1.18049554e-14,\n",
       "        7.26276370e-16, -4.60698705e-14,  2.09119375e-14, -5.88972493e-16,\n",
       "        4.30710694e-14, -2.45594143e-14, -8.22419877e-15, -2.93090995e-14,\n",
       "       -1.96146846e-14,  9.15145671e-15,  5.10994928e-14,  1.06802141e-14,\n",
       "       -1.60399964e-14,  2.21515442e-14,  2.80628906e-14,  2.45212709e-15,\n",
       "       -2.39064193e-15,  1.77052899e-14, -3.74114283e-14,  2.43306197e-14,\n",
       "        1.61016007e-14, -1.05211862e-14, -4.76953207e-14,  4.16237342e-14,\n",
       "       -1.55833926e-14, -6.23915778e-15,  1.78828024e-14,  9.97813765e-15,\n",
       "       -2.28140978e-15,  1.05269836e-14, -1.62627308e-14,  8.39747404e-15,\n",
       "        7.60194833e-16])"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.mean(axis=0) #standardized data should have mean of 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "46320748",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "       1.])"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.std(axis=0) #standardized data should have a unit variance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff8bbe76",
   "metadata": {},
   "source": [
    "# Partial Least Squares Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "d66c2205",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Explained Variance: 0.7736002784052896\n",
      "Mean Square Error: 95.09262463529852\n",
      "R-Squared 0.7735512182108298\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/sy/vmdm8s7s1fb071tz44wgb7p80000gn/T/ipykernel_6851/3401788711.py:23: FutureWarning: arrays to stack must be passed as a \"sequence\" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.\n",
      "  xy = np.vstack(map(x,y))\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "'numpy.ndarray' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/sy/vmdm8s7s1fb071tz44wgb7p80000gn/T/ipykernel_6851/3401788711.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;31m# Calculate point density\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m \u001b[0mxy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgaussian_kde\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mvstack\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.9/site-packages/numpy/core/shape_base.py\u001b[0m in \u001b[0;36mvstack\u001b[0;34m(tup)\u001b[0m\n\u001b[1;32m    278\u001b[0m         \u001b[0;31m# raise warning if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    279\u001b[0m         \u001b[0m_arrays_for_stack_dispatcher\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m     \u001b[0marrs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0matleast_2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         \u001b[0marrs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'numpy.ndarray' object is not callable"
     ]
    }
   ],
   "source": [
    "regr = PLSRegression()\n",
    "regr.fit(X_train, Y_train)\n",
    "\n",
    "regr.predict(X_train)\n",
    "Y_predict_test=regr.predict(X_test)\n",
    "\n",
    "#Performance metrics\n",
    "VAR = metrics.explained_variance_score(Y_test, Y_predict_test)\n",
    "MSE = metrics.mean_squared_error(Y_test, Y_predict_test)\n",
    "R2=metrics.r2_score(Y_test, Y_predict_test)\n",
    "\n",
    "print('Explained Variance:', VAR)\n",
    "print('Mean Square Error:', MSE)\n",
    "print('R-Squared', R2)\n",
    "\n",
    "#Density scatter plot of true brain age versus predicted brain age from test set data\n",
    "from scipy.stats import gaussian_kde\n",
    "\n",
    "x = Y_test\n",
    "y = Y_predict_test\n",
    "\n",
    "# Calculate point density\n",
    "xy = np.vstack(map(x,y))\n",
    "z = gaussian_kde(xy)(xy)\n",
    "\n",
    "# Sorting points based on density\n",
    "sort = z.argsort()\n",
    "x, y, z = x[sort], y[sort], z[sort]\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(x, y, c=z, s=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d207174",
   "metadata": {},
   "source": [
    "# Gradient Tree Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b26f787",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import make_regression\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ea51463",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "regr = GradientBoostingRegressor()\n",
    "regr.fit(X_train, Y_train)\n",
    "\n",
    "regr.predict(X_train)\n",
    "Y_predict_test=regr.predict(X_test)\n",
    "\n",
    "#Performance metrics\n",
    "VAR = metrics.explained_variance_score(Y_test, Y_predict_test)\n",
    "MSE = metrics.mean_squared_error(Y_test, Y_predict_test)\n",
    "R2=metrics.r2_score(Y_test, Y_predict_test)\n",
    "\n",
    "print('Explained Variance:', VAR)\n",
    "print('Mean Square Error:', MSE)\n",
    "print('R-Squared', R2)\n",
    "\n",
    "#Density scatter plot of true brain age versus predicted brain age from test set data\n",
    "from scipy.stats import gaussian_kde\n",
    "\n",
    "x = Y_test\n",
    "y = Y_predict_test\n",
    "\n",
    "# Calculate point density\n",
    "xy = np.vstack(map[x,y])\n",
    "z = gaussian_kde(xy)(xy)\n",
    "\n",
    "# Sorting points based on density\n",
    "sort = z.argsort()\n",
    "x, y, z = x[sort], y[sort], z[sort]\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(x, y, c=z, s=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6e0fd8d",
   "metadata": {},
   "source": [
    "# Bagging Meta-Estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "1c467421",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVR\n",
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.datasets import make_regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "5c2abed0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Explained Variance: 0.840561115934093\n",
      "Mean Square Error: 66.97569739952719\n",
      "R-Squared 0.8405074510902376\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "'type' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/sy/vmdm8s7s1fb071tz44wgb7p80000gn/T/ipykernel_6851/2444409741.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;31m# Calculate point density\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m \u001b[0mxy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgaussian_kde\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'type' object is not subscriptable"
     ]
    }
   ],
   "source": [
    "regr = BaggingRegressor()\n",
    "regr.fit(X_train, Y_train)\n",
    "\n",
    "regr.predict(X_train)\n",
    "Y_predict_test=regr.predict(X_test)\n",
    "\n",
    "#Performance metrics\n",
    "VAR = metrics.explained_variance_score(Y_test, Y_predict_test)\n",
    "MSE = metrics.mean_squared_error(Y_test, Y_predict_test)\n",
    "R2=metrics.r2_score(Y_test, Y_predict_test)\n",
    "\n",
    "print('Explained Variance:', VAR)\n",
    "print('Mean Square Error:', MSE)\n",
    "print('R-Squared', R2)\n",
    "\n",
    "#Density scatter plot of true brain age versus predicted brain age from test set data\n",
    "from scipy.stats import gaussian_kde\n",
    "\n",
    "x = Y_test\n",
    "y = Y_predict_test\n",
    "\n",
    "# Calculate point density\n",
    "xy = np.vstack(map[x,y])\n",
    "z = gaussian_kde(xy)(xy)\n",
    "\n",
    "# Sorting points based on density\n",
    "sort = z.argsort()\n",
    "x, y, z = x[sort], y[sort], z[sort]\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(x, y, c=z, s=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6bebd24",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
